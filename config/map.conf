/*
This is the main configuration file which controls map rendering.
Your best bet is to put this into a git repository along with your DXF files.
*/

// Location of the CartoCSS stylesheets for your raster layers
stylesheet_path  = "./styles"
// Location of symbols referenced in your stylesheets
symbol_path = "./symbols"
plugins = []

// OPTIONAL: The extents of your map, in WGS-84 coordinates (north, east, south, west)
// If not provided these will be calculated automatically from the extents of the plan
// extents = [52.292, 5.5405, 52.275, 5.169]
// The zoom range you're generating tiles for
zoom_range = [13, 20]
// Projection of your DXF file in proj4 format
source_projection = "epsg:28992"

/* ===== Input files ===== */

// Define a source DXF file. The name of this object corresponds to the
// PostGIS table this data will be imported to.
source_file "site_plan" {
  // Path to the DXF file.
  path = "map.dxf"

  // Whether we automatically import all layers from this file.
  // Auto-importing is simpler, but if you want to control the order
  // the layers are rendered in by Mapnik, you'll have to specify them
  // manually.
  auto_import_layers = false

  // A list of layers in the order they'll be rendered. Layers specified
  // first are rendered first (lower z-index).
  layers = [
    "terrain ... farmland",
    "terrain ... scrubland",
    "terrain ... unused",
    "terrain ... woodland",
  ]

  // Specify a layer with custom SQL
  custom_layer "no_dig" {
    // The variable {table} in this query will be replaced with the name of
    // the table it's imported to.
    query = "SELECT st_buffer(wkb_geometry, 5) AS wkb_geometry FROM {table} WHERE layer IN ('infrastructure ... sewer hole', 'infrastructure ... conduit', 'infrastructure ... power terminal')"
  }
}

/* ===== Raster output layers ===== */

// This is a layer which will be viewable on the web map. The
// name of the object is the name which will be shown on the viewer.
raster_layer "Base" {
  // CartoCSS stylesheet for this layer, relative to stylesheet_path.
  // Input layers (as defined above) are available in this stylesheet as IDs,
  // but some conversion is done to make them valid CSS IDs.
  stylesheet = "base.mss"
  z-index = 0

  // Whether the layer is initially visible on the map. Defaults to true.
  visible = true
}

raster_layer "Trees" {
  stylesheet = "trees.mss"
  z-index = 1
}

/* ===== Vector output layers ===== */

// This is a vector layer (rendered on the browser).
vector_layer "Power" {
  visible = false

  // A list of source layers, as defined in the source_file
  source_layers = [
    "infrastructure ... sketch ... power ... aluminium_4x050",
    "infrastructure ... sketch ... power ... aluminium_4x070",
    "infrastructure ... sketch ... power ... aluminium_4x095",
    "infrastructure ... sketch ... power ... aluminium_4x120",
    "infrastructure ... sketch ... power ... aluminium_4x150",
    "objects ... power terminal"
  ]

  // This defines a style structure for this layer, which is
  // passed to Javascript.
  //
  // The name of this object is either just a unique ID
  // (if the `layers` attribute is specified), or it can refer
  // directly to a layer. Here it's the former.
  layer_style "infrastructure" {
    // Layers this style applies to
    layers = [
      "infrastructure ... sketch ... power ... aluminium_4x050",
      "infrastructure ... sketch ... power ... aluminium_4x070",
      "infrastructure ... sketch ... power ... aluminium_4x095",
      "infrastructure ... sketch ... power ... aluminium_4x120",
      "infrastructure ... sketch ... power ... aluminium_4x150"
    ]
    line-color = "red"
    line-width = 3
  }

  // This style is applied directly to a single layer
  layer_style "objects ... power terminal" {
    line-color = "black"
    line-width = 5
    polygon-fill = "orange"
    z-index = 5
  }
}
